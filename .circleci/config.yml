# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          CC_TEST_REPORTER_ID: 8a4410163dc79de8123d25a2a68ac5e1b7cafed71c62d91929bdfa6bc8d010c3
          DEVISE_SECRET: 'bd53668480d69e85aad94c1dde6516f980ae530a246d75b667197273939ff31c01ef7845369b177c5c763f217a0a704d20e4ceaffe4264e97e867356fef9096d'
          SECRET_KEY_BASE: '93b266abca09ea94502b10cd23c9c7c4ecd31d3ad155f9fc1c227348aadaecf9bb802877a1490a4426e871629386fd69a6c091fcaa2380b4f3f97beeef39128d'
          PGHOST: localhost
          PGUSER: forex
          RAILS_ENV: test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: forex
          POSTGRES_DB: forex_test
          POSTGRES_PASSWORD: ""

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:setup

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results